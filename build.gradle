plugins {
    id 'java'
    id 'org.jetbrains.intellij' version '0.4.18'
    id 'org.jetbrains.kotlin.jvm' version '1.3.71'
}

group 'com.android.tools.idea.diagnostics'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

[compileKotlin, compileTestKotlin].each {
    it.kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs = ['-Xjvm-default=enable']
    }
}

// See https://github.com/JetBrains/gradle-intellij-plugin/
intellij {
    pluginName = "IDEA diagnostic plugin"
    version '2020.1'
    plugins = ['java'] // Used for the PsiElementFinder demo.

    // Disable the (slow) 'buildSearchableOptions' build task; we don't need it yet anyway.
    buildSearchableOptions.enabled = false
}

patchPluginXml {
    // Eventually: set changeNotes.
}

prepareSandbox {
    // Copy the agent jar into our plugin home directory.
    from(tasks.getByPath(':agent:jar')) {
        into "${intellij.pluginName}"
    }
}

runIde {
    // Disable auto-reload until we make sure it works correctly for this plugin.
    systemProperty('idea.auto.reload.plugins', 'false')

    // Always enable assertions.
    jvmArgs "-ea"

    // Copy over some JVM args from IntelliJ.
    jvmArgs "-XX:ReservedCodeCacheSize=240m"
    jvmArgs "-XX:+UseConcMarkSweepGC"
    jvmArgs "-XX:SoftRefLRUPolicyMSPerMB=50"
    jvmArgs "-Djdk.module.illegalAccess.silent=true"
    jvmArgs "-XX:+UseCompressedOops"

    // Add the -javaagent startup flag pointing to our agent.
    def agentJarName = tasks.getByPath(':agent:jar').outputs.files.singleFile.name
    def agentJarPath = "${intellij.sandboxDirectory}/plugins/${intellij.pluginName}/$agentJarName"
    jvmArgs "-javaagent:$agentJarPath"

    // Note: it should be possible to load the agent at runtime instead of at startup, although it might
    // be tricky due to the IDEA class loader configuration. The solution might look something like this:
    // 1. Make sure jdk.attach.allowAttachSelf=true at startup (already done in recent IntelliJ releases)
    // 2. Call VirtualMachine.attach(OSProcessUtil.getApplicationPid()) and then vm.loadAgent(...)
    // 3. Call Instrumentation.appendToBootstrapClassLoaderSearch()
}

dependencies {
    compileOnly project(':agent') // Using 'compileOnly' because the agent is already added to the boot classpath.
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-reflect"
    testImplementation group: 'junit', name: 'junit', version: '4.12'
}
